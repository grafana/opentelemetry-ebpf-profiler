package php

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/ebpf-profiler/libpf"
)

func TestRetrieveZendVMKindAmd64(t *testing.T) {
	testdata := []struct {
		code     []byte
		expected uint
	}{
		{
			code: []byte{0xF3, 0x0F, 0x1E, 0xFA, // 	endbr64
				0xB8, 0x04, 0x00, 0x00, 0x00, // 	mov 	eax, 4
				0xC3, // 	ret
			},
			expected: 4,
		},
	}
	for _, td := range testdata {
		res, err := retrieveZendVMKindAmd64(td.code)
		require.NoError(t, err)
		assert.Equal(t, td.expected, res)
	}
}

func TestRetrieveExecuteExJumpLabelAddressAmd64(t *testing.T) {
	testdata := []struct {
		code        []byte
		codeAddress libpf.SymbolValue
		expected    libpf.SymbolValue
	}{
		{
			code: []byte{
				0xf3, 0x0f, 0x1e, 0xfa, 0x55, 0x48, 0x89, 0xe5, 0x41, 0x55, 0x41, 0x54,
				0x53, 0x48, 0x81, 0xec, 0x88, 0x00, 0x00, 0x00, 0x64, 0x48, 0x8b, 0x04,
				0x25, 0x28, 0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0xd8, 0x31, 0xc0, 0x4c,
				0x89, 0x75, 0xb8, 0x49, 0x89, 0xfe, 0x4c, 0x89, 0x7d, 0xb0, 0x48, 0x85,
				0xff, 0x74, 0x30, 0x4c, 0x8b, 0x3f, 0x48, 0x8d, 0x05, 0xf3, 0x4d, 0x21,
				0x00, 0x0f, 0xb6, 0x80, 0x16, 0x02, 0x00, 0x00, 0x84, 0xc0, 0x0f, 0x85,
				0xec, 0x28, 0x00, 0x00, 0x48, 0x8d, 0x1d, 0xdd, 0x4d, 0x21, 0x00, 0x48,
				0x39, 0xab, 0x30, 0x02, 0x00, 0x00, 0x0f, 0x83, 0x4c, 0xe7, 0xd9, 0xff,
				0x41, 0xff, 0x27, 0x48, 0x8d, 0x05, 0x06, 0x01, 0x1e, 0x00, 0x66, 0x0f,
				0xef, 0xc0, 0xc7, 0x05, 0xc0, 0x5a, 0x21, 0x00, 0x95, 0x0d, 0x00, 0x00,
				0x48, 0x8d, 0x7d, 0xb0, 0x48, 0x89, 0x05, 0xbd,
			},
			codeAddress: 0x387090,
			expected:    0x3870f3,
		},
	}
	for _, td := range testdata {
		res, err := retrieveExecuteExJumpLabelAddressAmd64(td.code, td.codeAddress)
		require.NoError(t, err)
		assert.Equal(t, td.expected, res)
	}
}

func TestRetrieveJITBufferPtrAmd64(t *testing.T) {
	testdata := []struct {
		code         []byte
		codeAddress  libpf.SymbolValue
		expectedBuf  libpf.SymbolValue
		expectedSize libpf.SymbolValue
	}{
		{
			code: []byte{
				0xf3, 0x0f, 0x1e, 0xfa, 0x48, 0xf7, 0x05, 0x99, 0x7e, 0x03, 0x00,
				0x20, 0x01, 0x00, 0x00, 0x74, 0x07, 0xc3, 0x66, 0x0f, 0x1f, 0x44,
				0x00, 0x00, 0x55, 0xba, 0x03, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe5,
				0x53, 0x48, 0x83, 0xec, 0x08, 0x48, 0x8b, 0x35, 0x9b, 0x84, 0x03,
				0x00, 0x48, 0x8b, 0x3d, 0xac, 0x84, 0x03, 0x00, 0xe8, 0xe7, 0xb9,
				0xf4, 0xff, 0x85, 0xc0, 0x75, 0x0b, 0x48, 0x8b, 0x5d,
			},
			codeAddress:  0xcc930,
			expectedBuf:  0x104e10,
			expectedSize: 0x104df8,
		},
	}
	for _, td := range testdata {
		buf, sz, err := retrieveJITBufferPtrAmd64(td.code, td.codeAddress)
		require.NoError(t, err)
		assert.Equal(t, td.expectedBuf, buf)
		assert.Equal(t, td.expectedSize, sz)
	}
}
